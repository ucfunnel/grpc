// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bidding_strategy.proto

package biddingstrategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BiddingStrategyClient is the client API for BiddingStrategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiddingStrategyClient interface {
	Ping(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Greeting, error)
	Infer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error)
}

type biddingStrategyClient struct {
	cc grpc.ClientConnInterface
}

func NewBiddingStrategyClient(cc grpc.ClientConnInterface) BiddingStrategyClient {
	return &biddingStrategyClient{cc}
}

func (c *biddingStrategyClient) Ping(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := c.cc.Invoke(ctx, "/biddingstrategy.BiddingStrategy/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biddingStrategyClient) Infer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/biddingstrategy.BiddingStrategy/Infer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiddingStrategyServer is the server API for BiddingStrategy service.
// All implementations must embed UnimplementedBiddingStrategyServer
// for forward compatibility
type BiddingStrategyServer interface {
	Ping(context.Context, *Greeting) (*Greeting, error)
	Infer(context.Context, *Data) (*Result, error)
	mustEmbedUnimplementedBiddingStrategyServer()
}

// UnimplementedBiddingStrategyServer must be embedded to have forward compatible implementations.
type UnimplementedBiddingStrategyServer struct {
}

func (UnimplementedBiddingStrategyServer) Ping(context.Context, *Greeting) (*Greeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBiddingStrategyServer) Infer(context.Context, *Data) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Infer not implemented")
}
func (UnimplementedBiddingStrategyServer) mustEmbedUnimplementedBiddingStrategyServer() {}

// UnsafeBiddingStrategyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiddingStrategyServer will
// result in compilation errors.
type UnsafeBiddingStrategyServer interface {
	mustEmbedUnimplementedBiddingStrategyServer()
}

func RegisterBiddingStrategyServer(s grpc.ServiceRegistrar, srv BiddingStrategyServer) {
	s.RegisterService(&BiddingStrategy_ServiceDesc, srv)
}

func _BiddingStrategy_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Greeting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiddingStrategyServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biddingstrategy.BiddingStrategy/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiddingStrategyServer).Ping(ctx, req.(*Greeting))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiddingStrategy_Infer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiddingStrategyServer).Infer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biddingstrategy.BiddingStrategy/Infer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiddingStrategyServer).Infer(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// BiddingStrategy_ServiceDesc is the grpc.ServiceDesc for BiddingStrategy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiddingStrategy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biddingstrategy.BiddingStrategy",
	HandlerType: (*BiddingStrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BiddingStrategy_Ping_Handler,
		},
		{
			MethodName: "Infer",
			Handler:    _BiddingStrategy_Infer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bidding_strategy.proto",
}
